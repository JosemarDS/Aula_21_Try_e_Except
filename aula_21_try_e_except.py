# -*- coding: utf-8 -*-
"""Aula_21_try_e_except

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TSxlKb94HuGQQfO8rlzrTM5KwjDRtJdh

TRY E EXCEPT

O uso dos blocos `try` e `except` em Python é fundamental para lidar com exceções, ou seja, situações inesperadas ou erros que podem ocorrer durante a execução de um programa. Aqui está uma explicação mais detalhada desses blocos:

**Bloco `try`:**

- O bloco `try` é usado para envolver um código que pode gerar exceções.
- Ele define uma seção protegida do código onde você espera que exceções possam ocorrer.
- Se uma exceção ocorrer dentro do bloco `try`, o Python interromperá a execução normal do programa e procurará por um bloco `except` correspondente para lidar com a exceção.

**Bloco `except`:**

- O bloco `except` é usado para tratar exceções específicas que podem ocorrer dentro do bloco `try`.
- Você pode ter um ou mais blocos `except` após um bloco `try`, cada um lidando com um tipo específico de exceção.
- Quando uma exceção ocorre dentro do bloco `try`, o Python verifica os blocos `except` para encontrar um que corresponda ao tipo de exceção.
- O bloco `except` correspondente é executado, permitindo que você lide com a exceção de acordo com suas necessidades. Você pode exibir uma mensagem de erro, registrar informações ou executar qualquer outra ação apropriada.
"""

try:
    num1 = int(input("Digite um número: "))
    num2 = int(input("Digite outro número: "))
    resultado = num1 / num2
except ZeroDivisionError:
    print("Erro: Divisão por zero não é permitida.")
except ValueError:
    print("Erro: Digite números válidos.")
else:
    print("O resultado é:", resultado)

x = int(input('digite um numero: '))
y = int(input('digite um numero: 0'))
r = x/y
print(r)

try:
  text = 'Hello'
  a = 12
  print(text+a)

except TypeError:
  print('A concatenação esta incorreta')

try:

    def x():
      cumprimento = "Hello"
      print(cumprimento)

    def y():
      print(cumprimento)
    y()

except NameError:
      print('precisa utilizar variavel local')

try:

  x = int(input('digite um valor '))
  y = int(input('digite um valor '))

  print(x*y)

except TypeError:
  print('Erro de declaração do1 tipo de veriavel')

z = 10

try:
  print(z)
except help:
  print('digite o valor da variavel')

def element(lista, indice):
  try:
    return lista[indice]
  except IndexError:
    return None

lista = [20,30,50,10]
indice = int(input('Digite um indice: '))
elemento1 = element(lista, indice)

if elemento1 is not None:
  print(f'Válido.')
else:
  print('Não é vá1lido.')

"""Neste exemplo:

- O bloco `try` envolve o código que tenta converter entradas do usuário em números inteiros e realizar uma divisão.
- Se ocorrer uma exceção de divisão por zero (`ZeroDivisionError`) ou uma exceção de valor inválido (`ValueError`), os blocos `except` correspondentes lidarão com essas exceções.
- O bloco `else` é executado se nenhuma exceção ocorrer no bloco `try`, permitindo que você execute código adicional após a conclusão bem-sucedida do bloco `try`.

Em resumo, o bloco `try` e o bloco `except` são usados para controlar o tratamento de exceções em Python, permitindo que você lide com erros de forma adequada e evite que o programa seja interrompido abruptamente.

DOCUMENTAÇÃO DE  TIPOS DE ERRO

ALGUNS ERROS FAMOSOS:

TypeError - Surge quando uma função ou operação é aplicada a um objeto de tipo incorreto

UnboundLocalError - Surge quando uma referência é feita para uma variável local em uma função ou método, porém nenhum valor está preso à variável

UnicodeError - Surge quando existe um erro relacionado a Unicode codificação ou decodificação

UnicodeEncodeError - Surge quando um erro de codificação de Unicode ocorre

UnicodeDecodeError - Surge quando um erro de decodificação de Unicode ocorre

UnicodeTranslateError - Surge quando um erro de tradução de Unicode ocorre

ValueError - Surge quando uma função pega um argumento de tipo correto, porém de valor impróprio

ZeroDivisionError - Surge quando a segunda divisão ou módulo é zero

EXERCÍCIOS:

Exercício 1:
Peça ao usuário para inserir um número e manipule a exceção caso ele insira algo que não seja um número inteiro.
"""

try:
  numero = int(input('Digite um numero: '))

except ValueError:
  print('Não vale numeros no formato float')

from IPython.core.interactiveshell import IPython
try:
  x = int(input('digite um valor inteiro: '))
  print(f'Voce digitou -> {x}')
except ValueError:
  print('Digite valor inteiro')

"""Exercício 2:
Peça ao usuário para inserir dois números e realize uma operação de divisão. Manipule a exceção caso ocorra um erro na operação.
"""

try:

  x = int(input('digite um valor '))
  y = int(input('digite um valor '))

  print(x/y)

except TypeError:
  print('Erro de declaração do tipo de veriavel')

"""Exercício 3:
Crie uma função que aceite uma lista e um índice como entrada e retorne o elemento naquele índice. Manipule a exceção caso o índice seja inválido.
"""

def element(lista, indice):
  try:
    return lista[indice]
  except IndexError:
    return None

lista = [20,30,50,10]
indice = int(input('Digite um indice: '))
elemento1 = element(lista, indice)

if elemento1 is not None:
  print(f'Válido.')
else:
  print('Não é vá1lido.')

"""Exercício 4: Crie uma função que divida dois números e manipule a exceção caso o divisor seja zero."""

def div(x,z):
  try:
    result = x/y
    return result
  except ZeroDivisionError:
    print("a divisão precisa ser realizada com Zero")
n1 = float(input('digite um numero '))
n2 = float(input('digite mais um numero '))
result = div(n1, n2)
print(result)

"""Exercício 5: Escreva um programa que leia um arquivo e manipule a exceção caso o arquivo não exista."""



"""Exercício 6:
Escreva um programa que leia um arquivo CSV e manipule a exceção caso ocorra um erro na leitura ou análise do arquivo.
"""

import csv

try:
  arquivo = input('Digite q nome do csv')
  with open(arquivo, 'r') as arquivo:
    leitor_csv = csv.reader(arquivo)
  for linha in leitor_csv:
    print(linha)
except(FileNotFoundError, csv.Error) as e:
    print(f"Erro {e}")